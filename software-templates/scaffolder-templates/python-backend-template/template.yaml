apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-backend-template
  title: Create a Python Backend application with CI/CD
  description: Create a starter Python backend application managed by ArgoCD with a CI pipeline
  tags:
    - recommended
    - python
    - flask
spec:
  owner: janus-authors
  type: service

  parameters:
    - title: Provide information about the GitHub location
      required:
        - githubOrg
        - repoName
      properties:
        githubOrg:
          title: GitHub Organization
          type: string
        repoName:
          title: Repository Name
          type: string
    - title: Provide information about the new component
      required:
        - owner
      properties:
        description:
          title: Description
          type: string
          description: Help others understand what this component is for
        owner:
          title: Owner
          type: string
          description: Owner of the component
          default: 'group: janus-authors'
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Provide information about the CI method
      required:
        - ci
      properties:
        ci:
          title: Select a CI method
          type: string
          description: This action will create a CI pipeline for your application based on chosen method
          default: ../../scaffolder-skeletons/github-actions-skeleton/
          enum:
            - ../../scaffolder-skeletons/github-actions-skeleton/
            - ../../scaffolder-skeletons/tekton-skeleton/
          enumNames:
            - GitHub Action
            - Tekton
    - title: Provide information about the ArgoCD deployment
      required:
        - imageRepository
        - namespace
        - imageNamespace
        - port
      properties:
        imageRepository:
          title: Select a registry
          type: string
          default: quay.io
          enum:
            - image-registry.openshift-image-registry.svc:5000
            - quay.io
          enumNames:
            - Internal OpenShift Registry
            - Quay
        imageNamespace:
          title: Image Namespace
          type: string
          description: Enter the Quay.io or OpenShift Image Namespace <REGISTRY>/<image_namespace>/<REPO_NAME>
        namespace:
          title: Namespace
          type: string
          description: The namespace for deploying resources
        port:
          title: Port
          type: number
          default: 5000
          description: The port exposed for your application
  steps:
    - id: ci-template
      name: Generating the CI component
      action: fetch:template
      input:
        url: ${{ parameters.ci }}
        copyWithoutTemplating:
          - .github/workflows/
        values:
          github_org: ${{ parameters.githubOrg }}
          repo_name: ${{ parameters.repoName }}
          namespace: ${{ parameters.namespace }}
          image_namespace: ${{ parameters.imageNamespace }}
          default_branch: main
          image_builder: s2i-python
          image_repository: ${{ parameters.imageRepository }}

    - id: template
      name: Generating the source code component
      action: fetch:template
      input:
        url: ./skeleton
        values:
          github_org: ${{ parameters.githubOrg }}
          repo_name: ${{ parameters.repoName }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner}}
          namespace: ${{ parameters.namespace }}
          image_namespace: ${{ parameters.imageNamespace }}
          port: ${{ parameters.port }}
          image_repository: ${{ parameters.imageRepository }}

    - id: catalog-template
      name: Generating catalog-info.yaml
      action: fetch:template
      input:
        url: ../../scaffolder-skeletons/catalog-info-skeleton/
        values:
          github_org: ${{ parameters.githubOrg }}
          repo_name: ${{ parameters.repoName }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner}}
          namespace: ${{ parameters.namespace }}
          image_namespace: ${{ parameters.imageNamespace }}
          port: ${{ parameters.port }}
          image_repository: ${{ parameters.imageRepository }}

    - id: manifests-template
      name: Generating manifest component
      action: fetch:template
      input:
        url: ../../scaffolder-skeletons/manifests-skeleton/
        values:
          github_org: ${{ parameters.githubOrg }}
          repo_name: ${{ parameters.repoName }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner}}
          namespace: ${{ parameters.namespace }}
          image_namespace: ${{ parameters.imageNamespace }}
          port: ${{ parameters.port }}
          image_repository: ${{ parameters.imageRepository }}

    - id: publish
      name: Publishing to Source Code Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: ${{ parameters.description }}
        repoUrl: github.com?owner=${{ parameters.githubOrg }}&repo=${{ parameters.repoName }}
        defaultBranch: main

    - id: register
      name: Registering the component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
